Disclaimer:
  I am not affiliated with International Test Instruments at all. They
  kindly accepted that I start reverse-engineering their windows-only software
  so I could try to use a device I bought from them with Linux only. I had no
  privileged access to any documentation of any kind.

  This is a work in progress, so it is not stable yet.

Dependencies:
- python 2.4
- libusb 1.0 + python-libusb1[1]

Usage:
- Fetch "1480A USB Protocol Analyzer Software" from
  http://www.internationaltestinstruments.com/
  This creates, among other things, 2 files needed for the rest of this
  procedure:
    ITI1480A.spt
    ulpitest.rbf
- Install it (wine can install it, though you probably need to install .NET
  fist)
- Run
    sptreader.py /path/to/ITI1480A.spt
  This generates 2 files (as of v3.6 of ITI software)
- Run
    lsusb -d 16c0:07a8
  And use the bus and device addresses in following commands.
- As root, run
    cycfx2prog -d=<bus>.<device> prg:ITI1480A_1.hex run
  This loads the USB chip firmware into the USB analyser.
- As root, run
    rbfsend.py -f /path/to/ulpitest.rbf > out.usb
  This loads the FPGA initialisation file and starts dumping data sent by the
  analyser.
  Kill it (ctrl-c) when you want to stop the capture.
  Generated file is compatible with ITI's software (if not, it's a bug in
  rbfsend.py, please report).

There is no GUI at the moment, and there is no plan for one at the moment.
Though, to get a human-friendly dump, you can use dump_usb_file.py.

Integrating with udev:
- Copy udev/ITI1480A.rules in /etc/udev/rules.d
- Copy udev/ITI1480A.sh in /lib/udev
- Copy & rename ITI1480A_1.hex as /lib/firmware/ITI1480A.hex
- Restart udev
- (Re)plug your protocol analyser

[1] http://github.com/vpelletier/python-libusb1

